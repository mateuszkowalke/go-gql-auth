// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Company struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Email   string `json:"email"`
	Country string `json:"country"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewCompany struct {
	Name    string `json:"name"`
	Email   string `json:"email"`
	Country string `json:"country"`
}

type NewUser struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type User struct {
	ID        string   `json:"id"`
	Email     string   `json:"email"`
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Role      Role     `json:"role"`
	Company   *Company `json:"company"`
}

type Role string

const (
	RoleUser       Role = "user"
	RoleSuperadmin Role = "superadmin"
)

var AllRole = []Role{
	RoleUser,
	RoleSuperadmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleSuperadmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
